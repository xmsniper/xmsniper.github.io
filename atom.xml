<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小浣熊熊采坑录</title>
  
  <subtitle>xmwarrior log</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-13T02:02:44.361Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XMwarrior</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js规范</title>
    <link href="http://yoursite.com/2018/04/13/js%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/04/13/js规范/</id>
    <published>2018-04-13T01:55:19.000Z</published>
    <updated>2018-04-13T02:02:44.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a><strong>原则</strong></h4><p>As short as possible（如无必要，勿增注释）：尽量提高代码本身的清晰性、可读性。</p><p>As long as necessary（如有必要，尽量详尽）：合理的注释、空行排版等，可以让代码更易阅读、更具美感。</p><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a><strong>单行注释</strong></h4><p>必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</p><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a><strong>多行注释</strong></h4><p>避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</p><h4 id="函数-方法注释"><a href="#函数-方法注释" class="headerlink" title="函数/方法注释"></a><strong>函数/方法注释</strong></h4><p>函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。；<br>参数和返回值注释必须包含类型信息和说明；<br>当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 函数描述</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;string&#125; p1 参数1的说明</span><br><span class="line"> * @param &#123;string&#125; p2 参数2的说明，比较长</span><br><span class="line"> *     那就换行了.</span><br><span class="line"> * @param &#123;number=&#125; p3 参数3的说明（可选）</span><br><span class="line"> * @return &#123;Object&#125; 返回值描述</span><br><span class="line"> */</span><br><span class="line">function foo(p1, p2, p3) &#123;</span><br><span class="line">    var p3 = p3 || 10;</span><br><span class="line">    return &#123;</span><br><span class="line">        p1: p1,</span><br><span class="line">        p2: p2,</span><br><span class="line">        p3: p3</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a><strong>文件注释</strong></h4><p>文件注释用于告诉不熟悉这段代码的读者这个文件中包含哪些东西。 应该提供文件的大体内容, 它的 <strong><code>作者</code></strong> , <strong><code>依赖关系</code></strong> 和 <strong><code>兼容性信息</code></strong> 。如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @fileoverview Description of file, its uses and information</span><br><span class="line"> * about its dependencies.</span><br><span class="line"> * @author user@meizu.com (Firstname Lastname)</span><br><span class="line"> * Copyright 2009 Meizu Inc. All Rights Reserved.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h2 id="命名语法"><a href="#命名语法" class="headerlink" title="命名语法"></a>命名语法</h2><p>类名，使用名词。<br><figure class="highlight plain"><figcaption><span>Engine(options) &#123;&#125;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">函数名，使用动宾短语。</span><br><span class="line">```function getStyle(element) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>boolean 类型的变量使用 is 或 has 开头。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var isReady = false;</span><br><span class="line">var hasMoreCommands = false;</span><br></pre></td></tr></table></figure></p><p>Promise 对象用动宾短语的进行时表达。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var loadingData = ajax.get(&apos;url&apos;);</span><br><span class="line">loadingData.then(callback);</span><br></pre></td></tr></table></figure></p><h4 id="接口命名规范"><a href="#接口命名规范" class="headerlink" title="接口命名规范"></a><strong>接口命名规范</strong></h4><p>可读性强，见名晓义；<br>尽量不与 jQuery 社区已有的习惯冲突；<br>尽量写全。不用缩写，除非是下面列表中约定的；（变量以表达清楚为目标，uglify 会完成压缩体积工作）</p><table><thead><tr><th>常用词</th><th>说明：</th></tr></thead><tbody><tr><td>options</td><td>表示选项，与 jQuery 社区保持一致，不要用 config, opts 等</td></tr><tr><td>active</td><td>表示当前，不要用 current 等</td></tr><tr><td>index</td><td>表示索引，不要用 idx 等</td></tr><tr><td>trigger</td><td>触点元素</td></tr><tr><td>triggerType</td><td>触发类型、方式</td></tr><tr><td>context</td><td>表示传入的 this 对象</td></tr><tr><td>object</td><td>推荐写全，不推荐简写为 o, obj 等</td></tr><tr><td>element</td><td>推荐写全，不推荐简写为 el, elem 等</td></tr><tr><td>length</td><td>不要写成 len, l</td></tr><tr><td>prev</td><td>previous 的缩写</td></tr><tr><td>next</td><td>next 下一个</td></tr><tr><td>constructor</td><td>不能写成 ctor</td></tr><tr><td>easing</td><td>示动画平滑函数</td></tr><tr><td>min</td><td>minimize 的缩写</td></tr><tr><td>max</td><td>maximize 的缩写</td></tr><tr><td>DOM</td><td>不要写成 dom, Dom</td></tr><tr><td>.hbs</td><td>使用 hbs 后缀表示模版</td></tr><tr><td>btn</td><td>button 的缩写</td></tr><tr><td>link</td><td>超链接</td></tr><tr><td>title</td><td>主要文本</td></tr><tr><td>img</td><td>图片路径（img标签src属性)</td></tr><tr><td>dataset</td><td>html5 data-xxx 数据接口</td></tr><tr><td>theme</td><td>主题</td></tr><tr><td>className</td><td>类名</td></tr><tr><td>classNameSpace</td><td>class 命名空间</td></tr></tbody></table><p><strong> </strong>建议jquery对象命名采用 <code>$element</code>格式**</p><h2 id="True-和-False-布尔表达式"><a href="#True-和-False-布尔表达式" class="headerlink" title="True 和 False 布尔表达式"></a>True 和 False 布尔表达式</h2><p>类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。<br>下面的布尔表达式都返回 false:</p><ul><li>null</li><li>undefined</li><li>‘’ 空字符串</li><li>0 数字0</li><li>但小心下面的, 可都返回 true:</li><li>‘0’ 字符串0</li><li>[] 空数组</li><li>{} 空对象</li></ul><h2 id="不要在-Array-上使用-for-in-循环"><a href="#不要在-Array-上使用-for-in-循环" class="headerlink" title="不要在 Array 上使用 for-in 循环"></a>不要在 Array 上使用 for-in 循环</h2><p>for-in 循环只用于 object/map/hash 的遍历, 对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值。</p><h2 id="条件-三元-操作符"><a href="#条件-三元-操作符" class="headerlink" title="条件(三元)操作符 (?:)"></a>条件(三元)操作符 (?:)</h2><p>三元操作符用于替代 if 条件判断语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Not recommended</span><br><span class="line">if (val != 0) &#123;</span><br><span class="line">  return foo();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  return bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Recommended</span><br><span class="line">return val ? foo() : bar();</span><br></pre></td></tr></table></figure></p><h2 id="amp-amp-和"><a href="#amp-amp-和" class="headerlink" title="&amp;&amp; 和 ||"></a>&amp;&amp; 和 ||</h2><p>二元布尔操作符是可短路的, 只有在必要时才会计算到最后一项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// Not recommended</span><br><span class="line">function foo(opt_win) &#123;</span><br><span class="line">  var win;</span><br><span class="line">  if (opt_win) &#123;</span><br><span class="line">    win = opt_win;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    win = window;</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (node) &#123;</span><br><span class="line">  if (node.kids) &#123;</span><br><span class="line">    if (node.kids[index]) &#123;</span><br><span class="line">      foo(node.kids[index]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Recommended</span><br><span class="line">function foo(opt_win) &#123;</span><br><span class="line">  var win = opt_win || window;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var kid = node &amp;&amp; node.kids &amp;&amp; node.kids[index];</span><br><span class="line">if (kid) &#123;</span><br><span class="line">  foo(kid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p><strong>避免不必要的 DOM 操作</strong></p><p>浏览器遍历 DOM 元素的代价是昂贵的。最简单优化 DOM 树查询的方案是，当一个元素出现多次时，将它保存在一个变量中，就避免多次查询 DOM 树了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// good</span><br><span class="line">var myList = &quot;&quot;;</span><br><span class="line">var myListHTML = document.getElementById(&quot;myList&quot;).innerHTML;</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">  myList += &quot;&lt;span&gt;&quot; + i + &quot;&lt;/span&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myListHTML = myList;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">for (var i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">  document.getElementById(&quot;myList&quot;).innerHTML += &quot;&lt;span&gt;&quot; + i + &quot;&lt;/span&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>缓存数组长度</strong></p><p>循环无疑是和 JavaScript 性能非常相关的一部分。通过存储数组的长度，可以有效避免每次循环重新计算。<br>注: 虽然现代浏览器引擎会自动优化这个过程，但是不要忘记还有旧的浏览器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(1000),</span><br><span class="line">    len, i;</span><br><span class="line">// good</span><br><span class="line">for (i = 0, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">for (i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>异步加载第三方内容</strong></p><p>当你无法保证嵌入第三方内容比如 Youtube 视频或者一个 like/tweet 按钮可以正常工作的时候，你需要考虑用异步加载这些代码，避免阻塞整个页面加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    var script,</span><br><span class="line">        scripts = document.getElementsByTagName(&apos;script&apos;)[0];</span><br><span class="line"></span><br><span class="line">    function load(url) &#123;</span><br><span class="line">      script = document.createElement(&apos;script&apos;);</span><br><span class="line">      script.async = true;</span><br><span class="line">      script.src = url;</span><br><span class="line">      scripts.parentNode.insertBefore(script, scripts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    load(&apos;//apis.google.com/js/plusone.js&apos;);</span><br><span class="line">    load(&apos;//platform.twitter.com/widgets.js&apos;);</span><br><span class="line">    load(&apos;//s.widgetsite.com/widget.js&apos;);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p><strong>避免使用 jQuery 实现动画</strong></p><p>禁止使用 slideUp/Down() fadeIn/fadeOut() 等方法；尽量不使用 animate() 方法；</p><p>在确保产品兼容性的前提下，能利用requestAnimationFrame方式、css3方式实现的动画，就尽量用以上两种方式代替jQuery实现。</p><p>requestAnimationFrame使用方法请参考：<a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">CSS3动画那么强，requestAnimationFrame还有毛线用？-赵鑫旭</a></p><p><strong>备注：</strong></p><ol><li>开发环境统一严格模式，所有js文件头部统一添加<code>/*use strict*/</code>;<br>2.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;h4 id=&quot;原则&quot;&gt;&lt;a href=&quot;#原则&quot; class=&quot;headerlink&quot; title=&quot;原则&quot;&gt;&lt;/a&gt;&lt;strong&gt;原则&lt;/s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css规范</title>
    <link href="http://yoursite.com/2018/04/13/css%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/04/13/css规范/</id>
    <published>2018-04-13T01:55:09.000Z</published>
    <updated>2018-04-13T02:02:13.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p> id采用驼峰式命名；<br> 类名使用小写字母，以中划线分隔。</p><h2 id="正确使用-Display-的属性"><a href="#正确使用-Display-的属性" class="headerlink" title="正确使用 Display 的属性"></a>正确使用 Display 的属性</h2><p>Display 属性会影响页面的渲染，请合理使用。</p><ul><li>display: inline后不应该再使用 width、height、margin、padding 以及 float；</li><li>display: inline-block 后不应该再使用 float；</li><li>display: block 后不应该再使用 vertical-align；</li><li>display: table-* 后不应该再使用 margin 或者 float；</li></ul><h2 id="不滥用-Float"><a href="#不滥用-Float" class="headerlink" title="不滥用 Float"></a>不滥用 Float</h2><p>Float在渲染时计算量比较大，尽量减少使用。</p><h2 id="多利用硬件能力，如通过-3D-变形开启-GPU-加速"><a href="#多利用硬件能力，如通过-3D-变形开启-GPU-加速" class="headerlink" title="多利用硬件能力，如通过 3D 变形开启 GPU 加速"></a>多利用硬件能力，如通过 3D 变形开启 GPU 加速</h2><p>一般在 Chrome 中，3D或透视变换（perspective transform）CSS属性和对 opacity 进行 CSS 动画会创建新的图层，在硬件加速渲染通道的优化下，GPU 完成 3D 变形等操作后，将图层进行复合操作（Compesite Layers），从而避免触发浏览器大面积重绘和重排。<br>注：3D 变形会消耗更多的内存和功耗。<br>使用 translate3d 右移 500px 的动画流畅度要明显优于直接使用 left：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.ball-1 &#123;</span><br><span class="line">  transition: -webkit-transform .5s ease;</span><br><span class="line">  -webkit-transform: translate3d(0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.ball-1.slidein&#123;</span><br><span class="line">  -webkit-transform: translate3d(500px, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.ball-2 &#123;</span><br><span class="line">  transition: left .5s ease; left：0;</span><br><span class="line">&#125;</span><br><span class="line">.ball-2.slidein &#123;</span><br><span class="line">  left：500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="提升-CSS-选择器性能"><a href="#提升-CSS-选择器性能" class="headerlink" title="提升 CSS 选择器性能"></a>提升 CSS 选择器性能</h2><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免使用消耗更多匹配时间的选择器。而在这之前我们需要了解 CSS 选择器匹配的机制， 如子选择器规则：<br><code>#header &gt; a {font-weight:blod;}</code><br>我们中的大多数人都是从左到右的阅读习惯，会习惯性的设定浏览器也是从左到右的方式进行匹配规则，推测这条规则的开销并不高。<br>我们会假设浏览器以这样的方式工作：寻找 id 为 header 的元素，然后将样式规则应用到直系子元素中的 a 元素上。我们知道文档中只有一个 id 为 header 的元素，并且它只有几个 a 元素的子节点，所以这个 CSS 选择器应该相当高效。<br>事实上，却恰恰相反，CSS 选择器是从右到左进行规则匹配。了解这个机制后，例子中看似高效的选择器在实际中的匹配开销是很高的，浏览器必须遍历页面中所有的 a 元素并且确定其父元素的 id 是否为 header 。<br>如果把例子的子选择器改为后代选择器则会开销更多，在遍历页面中所有 a 元素后还需向其上级遍历直到根节点。<br><code>#header  a {font-weight:blod;}</code><br>理解了CSS选择器从右到左匹配的机制后，明白只要当前选择符的左边还有其他选择符，样式系统就会继续向左移动，直到找到和规则匹配的选择符，或者因为不匹配而退出。我们把最右边选择符称之为关键选择器。——更多详情</p><ol><li><p><strong>避免使用通用选择器</strong><br>浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 content 的元素，直到文档的根节点。因此其匹配开销是非常大的，所以应避免使用关键选择器是通配选择器的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* bad */</span><br><span class="line">.content * &#123;color: red;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>避免使用标签或 class 选择器限制 id 选择器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* bad */</span><br><span class="line">button#backButton &#123;…&#125;</span><br><span class="line">/* good */</span><br><span class="line">#newMenuIcon &#123;…&#125;</span><br></pre></td></tr></table></figure></li><li><p>避免使用标签限制 class 选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* bad */</span><br><span class="line">treecell.indented &#123;…&#125;</span><br><span class="line">/* good */</span><br><span class="line">.treecell-indented &#123;…&#125;</span><br><span class="line">/* better */</span><br><span class="line">.hierarchy-deep &#123;…&#125;</span><br></pre></td></tr></table></figure></li><li><p>避免使用多层标签选择器。使用 class 选择器替换，减少css查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* bad */</span><br><span class="line">treeitem[mailfolder=&quot;true&quot;] &gt; treerow &gt; treecell &#123;…&#125;</span><br><span class="line">/* good */</span><br><span class="line">.treecell-mailfolder &#123;…&#125;</span><br></pre></td></tr></table></figure></li><li><p>避免使用子选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* bad */</span><br><span class="line">treehead treerow treecell &#123;…&#125;</span><br><span class="line">/* good */</span><br><span class="line">treehead &gt; treerow &gt; treecell &#123;…&#125;</span><br><span class="line">/* better */</span><br><span class="line">.treecell-header &#123;…&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* bad */</span><br><span class="line">#bookmarkMenuItem &gt; .menu-left &#123; list-style-image: url(blah) &#125;</span><br><span class="line">/* good */</span><br><span class="line">#bookmarkMenuItem &#123; list-style-image: url(blah) &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不允许有空的规则；</li><li>元素选择器用小写字母；</li><li>去掉数字中不必要的小数点和末尾的0；</li><li>属性值’0’后面不要加单位；</li><li>同个属性不同前缀的写法需要在垂直方向保持对齐；</li><li>无前缀的标准属性应该写在有前缀的属性后面；</li><li>不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系；</li><li>不要在一个文件里出现两个相同的规则；</li><li>用 border: 0; 代替 border: none;；</li><li>选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）；</li><li>发布的代码中不要有 @import；</li><li>尽量少用’*’选择器。<h3 id="nec-网易-的reset"><a href="#nec-网易-的reset" class="headerlink" title="nec(网易) 的reset"></a>nec(网易) 的reset</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/* reset */</span><br><span class="line">html,body,h1,h2,h3,h4,h5,h6,div,dl,dt,dd,ul,ol,li,p,blockquote,pre,hr,figure,table,caption,th,td,form,fieldset,legend,input,button,textarea,menu&#123;margin:0;padding:0;&#125;</span><br><span class="line">header,footer,section,article,aside,nav,hgroup,address,figure,figcaption,menu,details&#123;display:block;&#125;</span><br><span class="line">table&#123;border-collapse:collapse;border-spacing:0;&#125;</span><br><span class="line">caption,th&#123;text-align:left;font-weight:normal;&#125;</span><br><span class="line">html,body,fieldset,img,iframe,abbr&#123;border:0;&#125;</span><br><span class="line">i,cite,em,var,address,dfn&#123;font-style:normal;&#125;</span><br><span class="line">[hidefocus],summary&#123;outline:0;&#125;</span><br><span class="line">li&#123;list-style:none;&#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6,small&#123;font-size:100%;&#125;</span><br><span class="line">sup,sub&#123;font-size:83%;&#125;</span><br><span class="line">pre,code,kbd,samp&#123;font-family:inherit;&#125;</span><br><span class="line">q:before,q:after&#123;content:none;&#125;</span><br><span class="line">textarea&#123;overflow:auto;resize:none;&#125;</span><br><span class="line">label,summary&#123;cursor:default;&#125;</span><br><span class="line">a,button&#123;cursor:pointer;&#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6,em,strong,b&#123;font-weight:bold;&#125;</span><br><span class="line">del,ins,u,s,a,a:hover&#123;text-decoration:none;&#125;</span><br><span class="line">body,textarea,input,button,select,keygen,legend&#123;font:12px/1.14 arial,\5b8b\4f53;color:#333;outline:0;&#125;</span><br><span class="line">body&#123;background:#fff;&#125;</span><br><span class="line">a,a:hover&#123;color:#333;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;p&gt; id采用驼峰式命名；&lt;br&gt; 类名使用小写字母，以中划线分隔。&lt;/p&gt;
&lt;h2 id=&quot;正确使用-Display-的属性&quot;&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html规范</title>
    <link href="http://yoursite.com/2018/04/13/html%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/04/13/html规范/</id>
    <published>2018-04-13T01:54:55.000Z</published>
    <updated>2018-04-13T02:07:40.487Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>head基本内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--字符编码：--&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;!--页面标题：--&gt;</span><br><span class="line">&lt;title&gt;青岛乘正科技有限公司&lt;/title&gt;</span><br><span class="line">&lt;!--页面关键词：--&gt;</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</span><br><span class="line">&lt;!--页面描述内容：--&gt;</span><br><span class="line">&lt;meta name=&quot;Description&quot; content=&quot;不超过150个字符&quot; /&gt;</span><br><span class="line">&lt;!--移动端及响应式网站：--&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot; /&gt;</span><br><span class="line">&lt;!--favicon 图标：--&gt;</span><br><span class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;img/favicon.ico&quot; type=&quot;img/x-icon&quot; /&gt;</span><br><span class="line">&lt;!--bookmark 图标：--&gt;</span><br><span class="line">&lt;link rel=&quot;bookmark&quot; href=&quot;img/favicon.ico&quot; type=&quot;img/x-icon&quot; /&gt;</span><br><span class="line">&lt;!--网页作者：--&gt;</span><br><span class="line">&lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></p><h4 id="可以选择加入的标签："><a href="#可以选择加入的标签：" class="headerlink" title="可以选择加入的标签："></a><strong><em>可以选择加入的标签</em></strong>：</h4><ol><li><p>设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;expires&quot; content=&quot;Wed, 26 Feb 1997 08：21：57 GMT&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>禁止浏览器从本地机的缓存中调阅页面内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>用来防止别人在框架里调用你的页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Window-target&quot; content=&quot;_top&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>自动跳转(5 指时间停留 5 秒)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;url=http://www.baidu.com&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong><em>备注</em></strong><br>http缓存机制深入理解推荐文章：</p><ol><li><a href="https://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="noopener">彻底弄懂HTTP缓存机制及原理</a></li><li><a href="https://www.cnblogs.com/vajoy/p/5341664.html" target="_blank" rel="noopener">浅谈浏览器http的缓存机制</a></li></ol><h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><ol><li>请不要在网页中连续出现多于一个的空格，也尽量少使用全角空格（英文字符集下，全角空格会变成乱码），空白应该尽量使用 <code>text-indent</code> <code>padding</code> <code>margin</code>实现。</li><li><p>a标签无文字提示时设置title属性，img标签设置alt属性。a标签默认占位符’###’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;###&quot; title=&quot;给链接文字提示&quot;&gt;&lt;img src=&quot;图片.gif&quot; alt=&quot;给图片提示&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>尽量遵循HTML标准和语义。基本的H5语义标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`header` `nav` `section` `artical` `aside` `dialog` `footer`</span><br></pre></td></tr></table></figure></li><li><p>标签属性定义推荐顺序依次为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`id class name data-*`</span><br></pre></td></tr></table></figure></li><li><p>尽量避免多余的父节点、注释节点。例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;!--多余父节点--&gt;</span><br><span class="line">&lt;!--&lt;span&gt;无用注释节点&lt;/span&gt;--&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a><strong>补充</strong>：</h3><ul><li>尽量采用外链css样式，避免内部及内联样式。</li><li>script统一放至body标签内最后。（此引用js方式，无需document.ready检测）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;head&quot;&gt;&lt;a href=&quot;#head&quot; class=&quot;headerlink&quot; title=&quot;head&quot;&gt;&lt;/a&gt;head&lt;/h2&gt;&lt;p&gt;head基本内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>函数节流</title>
    <link href="http://yoursite.com/2018/04/13/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
    <id>http://yoursite.com/2018/04/13/函数节流/</id>
    <published>2018-04-13T01:15:40.000Z</published>
    <updated>2018-04-13T01:15:40.469Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
